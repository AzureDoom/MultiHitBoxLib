buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven {url='https://repo.spongepowered.org/repository/maven-public'}
        mavenCentral()
        // Parchment
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		// Mixin
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        // Parchment
        // classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
		classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    // this version works on gradle 7.x
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

version = "$mcVersion-$modVersion"
group = 'de.dertoaster.multihitboxlib'
archivesBaseName = "$modName"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
	shade
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '1.19.3-2023.03.12-1.20.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
			taskName 'runClient MHLib 1.20.1'
            workingDirectory project.file('run')
			arg "-mixin.config=multihitboxlib.mixins.json"

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
			
			property 'mixin.debug', 'true'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'multihitboxlib'

            mods {
                multihitboxlib {
                    source sourceSets.main
                }
            }
        }

        server {
			taskName 'runServer MHLib 1.20.1'
            workingDirectory project.file('run')
			arg "-mixin.config=multihitboxlib.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
			
			property 'mixin.debug', 'true'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'multihitboxlib'

            mods {
                multihitboxlib {
                    source sourceSets.main
                }
            }
        }

        data {
			taskName 'runData MHLib 1.20.1'
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'multihitboxlib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                multihitboxlib {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // GeckoLib
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven' }

    // CurseForge
    maven { url 'https://www.cursemaven.com' }
	
	// java repo to get databuddy from
	maven { url "https://cubicinterpolation.net/maven/" }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.20.1-47.0.35'

    // GeckoLib
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.20:4.2')
	// Mixin
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
	
	// Databuddy
	implementation fg.deobf("commoble.databuddy:${databuddy_branch}:${databuddy_version}")
	shade fg.deobf("commoble.databuddy:${databuddy_branch}:${databuddy_version}")
}

shadowJar {
	classifier = ''
	configurations = [project.configurations.shade]
	relocate 'commoble.databuddy', "${project.group}.shadow.commoble.databuddy"
}

reobf {
    shadowJar { }
}

mixin {
    add sourceSets.main, "multihitboxlib.refmap.json"
}

// Generate a fixed tsrg file after generating the default tsrg file
createMcpToSrg {
    outputs.upToDateWhen {false}
    doLast {
        fixFG5TsrgForMixinAP(output.get().asFile, file("${buildDir}/fixMcpToSrg/output.tsrg"))
    }
}

// Tell mixin to use the fixed TSRG file
mixin {
    reobfSrgFile = file("${buildDir}/fixMcpToSrg/output.tsrg")
	
	debug.verbose = true
	debug.export = true
	debug = true
}

// Function that actually fixes the TSRG file
static def fixFG5TsrgForMixinAP(File inFile, File outFile) {
    // Make directory if needed
    outFile.parentFile.mkdirs()

    try (Scanner scanner = new Scanner(inFile); PrintWriter out = new PrintWriter(outFile)) {
        boolean firstLine = true
        while (scanner.hasNextLine()) {
            String next = scanner.nextLine()

            // Skip first 'tsrg left right' header line
            if (firstLine) {
                firstLine = false
                continue
            }

            // Skip 'static' indicators
            if (next.trim() == "static") {
                continue
            }

            // Export line otherwise
            out.println(next)
        }
    }
}

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
            "Specification-Title": "$modName",
            "Specification-Vendor": "DerToaster",
            "Specification-Version": "$modVersion", // We are version 1 of ourselves
            "Implementation-Title": "$modName",
            "Implementation-Version": "$modVersion",
            "Implementation-Vendor" :"DerToaster",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "multihitboxlib.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
